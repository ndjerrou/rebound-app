module.exports = {
  parserOptions: {
    ecmaFeatures: {
      jsx: true,
    },
    ecmaVersion: 13,
    sourceType: 'module',
  },
  plugins: ['import', 'react', '@typescript-eslint', 'prettier'],
  parser: '@typescript-eslint/parser',
  extends: [
    'eslint:recommended',
    'plugin:import/errors',
    'plugin:react/recommended',
    'plugin:jsx-a11y/recommended',
    'plugin:react-hooks/recommended',
    'plugin:react/jsx-runtime',
    'airbnb',
    'airbnb/hooks',
    'prettier',
  ],
  overrides: [
    {
      // enable the rule specifically for TypeScript files
      files: ['*.ts', '*.tsx'],
      rules: {
        '@typescript-eslint/explicit-function-return-type': 2,
        '@typescript-eslint/no-var-requires': 2,
        'react/prop-types': 2,
      },
    },
  ],
  settings: {
    'import/resolver': {
      node: {
        extensions: ['.js', '.jsx', '.ts', '.tsx', '.d.ts'],
      },
    },
  },
  rules: {
    semi: 1,
    'arrow-body-style': 2,
    camelcase: 0,
    'consistent-return': 1,
    'import/extensions': [
      2,
      'ignorePackages',
      {
        js: 'never',
        jsx: 'never',
        ts: 'never',
        tsx: 'never',
      },
    ],
    'import/no-absolute-path': 1,
    'import/no-unresolved': 1,
    'import/no-extraneous-dependencies': [
      2,
      {
        devDependencies: [
          '**/*.test.*',
          '**/*.spec.*',
          '**/setupTests.ts',
          'tailwind.config.js',
        ],
      },
    ],
    'import/prefer-default-export': 1,
    'jsx-a11y/anchor-is-valid': 1,
    'jsx-a11y/click-events-have-key-events': 1,
    'jsx-a11y/html-has-lang': 1,
    'jsx-a11y/no-static-element-interactions': 1,
    'no-param-reassign': [1, { props: false }],
    'no-plusplus': 0,
    'no-underscore-dangle': 0,
    'no-unused-expressions': [
      2,
      { allowTernary: true, allowShortCircuit: true },
    ],
    'no-unused-vars': [1, { args: 'none' }],
    'no-use-before-define': 2,
    'one-var': 1,
    'prefer-arrow-callback': 2,
    'prettier/prettier': 1,
    radix: [1, 'as-needed'],
    'react/default-props-match-prop-types': 0,
    'react/destructuring-assignment': 1,
    'react/forbid-prop-types': 0,
    'react/function-component-definition': [
      2,
      {
        namedComponents: 'arrow-function',
        unnamedComponents: 'arrow-function',
      },
    ],
    'react-hooks/exhaustive-deps': 0,
    'react/jsx-filename-extension': 0,
    'react/jsx-no-useless-fragment': [1, { allowExpressions: true }],
    'react/jsx-props-no-spreading': 0,
    'react/jsx-uses-react': 1,
    'react/no-unescaped-entities': 0,
    'react/no-unused-prop-types': 1,
    'react/prefer-stateless-function': 1,
    'react/prop-types': 0,
    'react/react-in-jsx-scope': 1,
    'react/require-default-props': 1,
    'unicorn/no-null': 0,
    '@typescript-eslint/camelcase': 0,
    '@typescript-eslint/no-explicit-any': 1,
    '@typescript-eslint/no-non-null-assertion': 1,
    // Place to specify ESLint rules. Can be used to overwrite rules specified from the extended configs
    // e.g. "@typescript-eslint/explicit-function-return-type": "off",
  },
  env: {
    browser: true,
    es2021: true,
    node: true,
  },
  globals: {
    AddProductToCart: 'readonly',
    AppStylesProps: 'readonly',
    BillingWP: 'readonly',
    CartContextProps: 'readonly',
    CartContextType: 'readonly',
    CheckProductInCart: 'readonly',
    Discount: 'readonly',
    expect: 'readonly',
    FormatCoupon: 'readonly',
    GetAddressWP: 'readonly',
    GetDiscount: 'readonly',
    GetOrderWP: 'readonly',
    initialState: 'readonly',
    isAdmin: 'readonly',
    JSX: 'readonly',
    OrderWP: 'readonly',
    LookBook: 'readonly',
    Product: 'readonly',
    Products: 'readonly',
    Provider: 'readonly',
    rbData: 'readonly',
    RemoveProductToCart: 'readonly',
    ShippingWP: 'readonly',
    ScrollBehavior: 'readonly',
    State: 'readonly',
    Term: 'readonly',
    test: 'readonly',
  },
};
